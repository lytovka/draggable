name: Release to npm registry
on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: Release type
        options:
          - pre-release
          - release
      version-type:
        type: choice
        description: Version type
        options:
          - patch
          - minor
          - major

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release
      cancel-in-progress: true
    outputs:
      git_tag: ${{ steps.create-git-tag.outputs.git_tag }}
      changelog: ${{ steps.generated-changelog.outputs.changelog }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Generate changelog
        id: generated-changelog
        uses: ./.github/actions/changelog
        with:
          release-type: ${{ github.event.inputs.release-type }} 
          github-token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Retrieve Node version from .nvmrc
        id: node-version
        run: echo "version=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: ${{ steps.node-version.outputs.version }}
     
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build

      - name: Determine new version 
        run: |
          script_path="${{ github.workspace }}/scripts/ci/newVersion.cjs"
          release_type="${{ github.event.inputs.release-type }}"
          version_type="${{ github.event.inputs.version-type }}"
          echo "NEW_VERSION=$(node ${script_path} ${release_type} ${version_type})" >> $GITHUB_ENV

      - name: Publish to npm registry (latest tag)
        if: github.event.inputs.release-type == 'release'
        run: |
          # update to the new version locally
          npm version --no-git-tag-version $NEW_VERSION
          # publish package
          npm publish --access public --tag "latest"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
            
      - name: Publish to npm registry (beta tag)
        if: github.event.inputs.release-type == 'pre-release'
        run: |
          # update to the new version locally
          npm version --no-git-tag-version $NEW_VERSION
          # publish package
          npm publish --access public --tag "beta"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create chore release message
        id: chore-release-commit-message
        run: |
          release_type="${{ github.event.inputs.release-type }}"
          commit_message_type="chore($release_type)"
          commit_message_content="bump project to v$NEW_VERSION"
          echo "commit_message=$commit_message_type: $commit_message_content" >> $GITHUB_OUTPUT

      - name: Create release branch, commit and push files
        id: chore-release-branch
        run: |
          release_type="${{ github.event.inputs.release-type }}"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          branch_name="chore/${release_type}-${NEW_VERSION}"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          git checkout -b "$branch_name"

          git add package.json package-lock.json
          git commit -m "${{ steps.chore-release-commit-message.outputs.commit_message }}"
          git push --set-upstream origin "$branch_name"
      
      - name: Create release pull request
        run: |
          release_type=${{ github.event.inputs.release-type }}
          gh pr create --base "main" --label "$release_type" --title "${{ steps.chore-release-commit-message.outputs.commit_message }}" --body "Automated PR. This PR updates package to the most recently published version: \`$NEW_VERSION\`."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     
      - name: Auto-merge pull request
        if: steps.chore-release-branch.outputs.branch_name 
        run: |
          gh pr merge ${{ steps.chore-release-branch.outputs.branch_name }} --admin --squash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout base branch and pull latest changes
        run: |
          git checkout master
          git pull origin master

      - name: Create git tag for the release
        id: create-git-tag
        run: |
          GIT_TAG=v$NEW_VERSION
          git tag $GIT_TAG
          git push origin $GIT_TAG
          echo "git_tag=$GIT_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        run: |
          release_type=${{ github.event.inputs.release-type }}
          GIT_TAG=${{ steps.create-git-tag.outputs.git_tag }}
          RELEASE_ARGS="--target main --title $GIT_TAG --verify-tag --notes-file .github/changelog.txt"
          if [ $release_type == "pre-release" ]; then
            RELEASE_ARGS="$RELEASE_ARGS --prerelease"
          fi

          gh release create $GIT_TAG $RELEASE_ARGS 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
